# -*- coding: utf-8 -*-
"""Feed_Forwards_Model

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mwMuF6zEKtvQrqqb_jE717s7J2ebr2SX
"""

import pandas as pd
import numpy as np
import matplotlib.dates as mdates
from datetime import date

from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error

d0 = date(2021, 10, 7)
d1 = date.today()
gap = abs(d0-d1)
gap = gap.days
csse_df = pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv')
wy_df = csse_df[csse_df['Province_State'] == 'Wyoming']
pd.set_option('display.max_rows', 10)
pd.set_option('display.max_columns', 5)
nd_df = csse_df[csse_df['Province_State'] == 'North Dakota']
mt_df = csse_df[csse_df['Province_State'] == 'Montana']
sd_df = csse_df[csse_df['Province_State'] == 'South Dakota']
id_df = csse_df[csse_df['Province_State'] == 'Idaho']
df = pd.concat([wy_df,nd_df,mt_df,sd_df,id_df], ignore_index=True)
df['Location'] = df['Admin2'].str.cat(df['Province_State'], sep=', ')
df = df.drop(columns=['UID','code3','iso2','iso3','FIPS','Country_Region','Lat','Long_','Combined_Key',
                      #'2/1/20','2/2/20','2/3/20','2/4/20','2/5/20',
                      #'2/6/20','2/7/20','2/8/20','2/9/20','2/10/20','2/11/20','2/12/20','2/13/20','2/14/20','2/15/20','2/16/20','2/17/20','2/18/20',
                      #'2/19/20','2/20/20','2/21/20','2/22/20','2/23/20','2/24/20','2/25/20','2/26/20','2/27/20','2/28/20','2/29/20','3/1/20','3/2/20',
                      #'3/3/20','3/4/20','3/5/20','3/6/20','3/7/20','3/8/20','3/9/20','3/10/20',
                      'Admin2','Province_State'])

headers_vals = list(df['Location'])
headers_vals.insert(0,'Date')
df = df.drop(columns=['Location'])
df = df.transpose().reset_index()
df.columns = headers_vals
df = df.set_index('Date')
df = df.drop(columns=['Out of WY, Wyoming','Unassigned, Wyoming','Out of ND, North Dakota','Unassigned, North Dakota','Out of MT, Montana',
                      'Unassigned, Montana','Out of SD, South Dakota','Unassigned, South Dakota','Out of ID, Idaho','Unassigned, Idaho'])

df_new_cases_only = pd.DataFrame()
for i in list(df):
  array = [second - first for first, second in zip(df[i], df[i][1:])]
  # Make all negative values 0
  pos_array = []
  for j in array:
      if j < 0:
          a = 0
      else:
          a = j
      pos_array.append(a)
  df_new_cases_only[i] = pos_array

# Convert all to floats
df_new_cases_only = df_new_cases_only.astype(float)

df

df[len(df)-gap-7:len(df)-gap-6]

df_new_cases_only[len(df_new_cases_only)-gap-7:len(df_new_cases_only)-gap-6]

days = 7

day0 = df[len(df)-gap-9:len(df)-gap-6]
day1 = df[len(df)-gap-8+days:len(df)-gap-7+days]

day0

import pandas as pd
import numpy as np
import matplotlib.dates as mdates
from datetime import date

from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error

d0 = date(2021, 10, 7)
d1 = date.today()
gap = abs(d0-d1)
gap = gap.days

csse_df = pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv')
wy_df = csse_df[csse_df['Province_State'] == 'Wyoming']
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
nd_df = csse_df[csse_df['Province_State'] == 'North Dakota']
mt_df = csse_df[csse_df['Province_State'] == 'Montana']
sd_df = csse_df[csse_df['Province_State'] == 'South Dakota']
id_df = csse_df[csse_df['Province_State'] == 'Idaho']
df = pd.concat([wy_df,nd_df,mt_df,sd_df,id_df], ignore_index=True)
df['Location'] = df['Admin2'].str.cat(df['Province_State'], sep=', ')
df = df.drop(columns=['UID','code3','iso2','iso3','FIPS','Country_Region','Lat','Long_','Combined_Key',
                      #'2/1/20','2/2/20','2/3/20','2/4/20','2/5/20',
                      #'2/6/20','2/7/20','2/8/20','2/9/20','2/10/20','2/11/20','2/12/20','2/13/20','2/14/20','2/15/20','2/16/20','2/17/20','2/18/20',
                      #'2/19/20','2/20/20','2/21/20','2/22/20','2/23/20','2/24/20','2/25/20','2/26/20','2/27/20','2/28/20','2/29/20','3/1/20','3/2/20',
                      #'3/3/20','3/4/20','3/5/20','3/6/20','3/7/20','3/8/20','3/9/20','3/10/20',
                      'Admin2','Province_State'])

headers_vals = list(df['Location'])
headers_vals.insert(0,'Date')
df = df.drop(columns=['Location'])
df = df.transpose().reset_index()
df.columns = headers_vals
df = df.set_index('Date')
df = df.drop(columns=['Out of WY, Wyoming','Unassigned, Wyoming','Out of ND, North Dakota','Unassigned, North Dakota','Out of MT, Montana',
                      'Unassigned, Montana','Out of SD, South Dakota','Unassigned, South Dakota','Out of ID, Idaho','Unassigned, Idaho'])

# Convert to new cases only
df_new_cases_only = pd.DataFrame()
for i in list(df):
  array = [second - first for first, second in zip(df[i], df[i][1:])]
  # Make all negative values 0
  pos_array = []
  for j in array:
      if j < 0:
          a = 0
      else:
          a = j
      pos_array.append(a)
  df_new_cases_only[i] = pos_array

# Convert all to floats
df_new_cases_only = df_new_cases_only.astype(float)
df = df_new_cases_only
'''p = 0
for i in df:
  df[i] = df.iloc[:,p].rolling(window=7).mean()            #for 7 day ma
  p = p + 1
df = df[7:len(df)].reset_index(drop=True)'''
# New way to generate arrays of length X
interval = 40
features = []
labels = []
counties = []
actual = []
day = []

days = 3

# Iterate across dataframe, one county at a time
for county in list(df):
  
  seq = list(df[county])

  day0 = seq[len(seq)-gap-7:len(seq)-gap-6]
  day1 = seq[len(seq)-gap-7+days:len(seq)-gap-6+days]

  actual.append(day0)
  day.append(day1)

mse_test = mean_squared_error(actual, day)
mae_test = mean_absolute_error(actual, day)

print(mse_test)
print(mae_test)

day0

day1