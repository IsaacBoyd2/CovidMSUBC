# -*- coding: utf-8 -*-
"""Feed Forwards National

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W28Z1IcK5INzmHPWHdDLuw_GQNmofiND
"""

import pandas as pd
import numpy as np
from datetime import datetime
from datetime import date
from datetime import timedelta

from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error

d0 = date(2021, 2, 28)
d1 = date.today()

gap = abs(d0-d1)
gap = gap.days

csse_df = pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv')
# (put these all in one line when you get a chance!) df = pd.concat([csse_df[csse_df['Province_State'] == 'Wyoming'],csse_df[csse_df['Province_State'] == 'North Dakota']])

wy_df = csse_df[csse_df['Province_State'] == 'Wyoming']
nd_df = csse_df[csse_df['Province_State'] == 'North Dakota']
mt_df = csse_df[csse_df['Province_State'] == 'Montana']
sd_df = csse_df[csse_df['Province_State'] == 'South Dakota']
id_df = csse_df[csse_df['Province_State'] == 'Idaho']
wa_df = csse_df[csse_df['Province_State'] == 'Washington']
or_df = csse_df[csse_df['Province_State'] == 'Oregon']
nv_df = csse_df[csse_df['Province_State'] == 'Nevada']
ut_df = csse_df[csse_df['Province_State'] == 'Utah']
co_df = csse_df[csse_df['Province_State'] == 'Colorado']
ne_df = csse_df[csse_df['Province_State'] == 'Nebraska']
ia_df = csse_df[csse_df['Province_State'] == 'Iowa']
mn_df = csse_df[csse_df['Province_State'] == 'Minnesota']
ca_df = csse_df[csse_df['Province_State'] == 'California']
az_df = csse_df[csse_df['Province_State'] == 'Arizona']
nm_df = csse_df[csse_df['Province_State'] == 'New Mexico']
tx_df = csse_df[csse_df['Province_State'] == 'Texas']
ok_df = csse_df[csse_df['Province_State'] == 'Oklahoma']
ks_df = csse_df[csse_df['Province_State'] == 'Kansas']
mo_df = csse_df[csse_df['Province_State'] == 'Missouri']
il_df = csse_df[csse_df['Province_State'] == 'Illinois']
wi_df = csse_df[csse_df['Province_State'] == 'Wisconsin']
mi_df = csse_df[csse_df['Province_State'] == 'Michigan']
in_df = csse_df[csse_df['Province_State'] == 'Indiana']
ky_df = csse_df[csse_df['Province_State'] == 'Kentucky']
tn_df = csse_df[csse_df['Province_State'] == 'Tennessee']
ms_df = csse_df[csse_df['Province_State'] == 'Mississippi']
ar_df = csse_df[csse_df['Province_State'] == 'Arkansas']
la_df = csse_df[csse_df['Province_State'] == 'Louisiana']
al_df = csse_df[csse_df['Province_State'] == 'Alabama']
ga_df = csse_df[csse_df['Province_State'] == 'Georgia']
fl_df = csse_df[csse_df['Province_State'] == 'Florida']
sc_df = csse_df[csse_df['Province_State'] == 'South Carolina']
nc_df = csse_df[csse_df['Province_State'] == 'North Carolina']
va_df = csse_df[csse_df['Province_State'] == 'Virginia']
wv_df = csse_df[csse_df['Province_State'] == 'West Virginia']
oh_df = csse_df[csse_df['Province_State'] == 'Ohio']
pa_df = csse_df[csse_df['Province_State'] == 'Pennsylvania']
md_df = csse_df[csse_df['Province_State'] == 'Maryland']
de_df = csse_df[csse_df['Province_State'] == 'Delaware']
nj_df = csse_df[csse_df['Province_State'] == 'New Jersey']
ny_df = csse_df[csse_df['Province_State'] == 'New York']
vt_df = csse_df[csse_df['Province_State'] == 'Vermont']
ct_df = csse_df[csse_df['Province_State'] == 'Connecticut']
ri_df = csse_df[csse_df['Province_State'] == 'Rhode Island']
ma_df = csse_df[csse_df['Province_State'] == 'Massachusetts']
nh_df = csse_df[csse_df['Province_State'] == 'New Hampshire']
me_df = csse_df[csse_df['Province_State'] == 'Maine']

df = pd.concat([wy_df,nd_df,mt_df,sd_df,id_df,wa_df,or_df,nv_df,ut_df,co_df,ne_df,ia_df,mn_df,ca_df,az_df,nm_df,tx_df,ok_df,la_df,ar_df,mo_df,ks_df,wi_df,mi_df,in_df,il_df,ky_df,tn_df,ms_df,al_df,ga_df,fl_df,sc_df,nc_df,va_df,wv_df,oh_df,pa_df,md_df,de_df,nj_df,ny_df,ct_df,ri_df,ma_df,vt_df,nh_df,me_df], ignore_index=True)

df['Location'] = df['Admin2'].str.cat(df['Province_State'], sep=', ')

df = df.drop(columns=['UID','code3','iso2','iso3','FIPS','Country_Region','Lat','Long_','Combined_Key',
                      #'2/1/20','2/2/20','2/3/20','2/4/20','2/5/20',
                      #'2/6/20','2/7/20','2/8/20','2/9/20','2/10/20','2/11/20','2/12/20','2/13/20','2/14/20','2/15/20','2/16/20','2/17/20','2/18/20',
                      #'2/19/20','2/20/20','2/21/20','2/22/20','2/23/20','2/24/20','2/25/20','2/26/20','2/27/20','2/28/20','2/29/20','3/1/20','3/2/20',
                      #'3/3/20','3/4/20','3/5/20','3/6/20','3/7/20','3/8/20','3/9/20','3/10/20',
                      'Admin2','Province_State'])


headers_vals = list(df['Location'])

headers_vals.insert(0,'Date')

df = df.drop(columns=['Location'])

df = df.transpose().reset_index()

df.columns = headers_vals

df = df.set_index('Date')

df = df.drop(columns=['Out of WY, Wyoming','Unassigned, Wyoming','Out of ND, North Dakota','Unassigned, North Dakota','Out of MT, Montana',
                      'Unassigned, Montana','Out of SD, South Dakota','Unassigned, South Dakota','Out of ID, Idaho','Unassigned, Idaho','Out of WA, Washington','Unassigned, Washington','Out of OR, Oregon','Unassigned, Oregon','Out of NV, Nevada',
                      'Unassigned, Nevada','Out of UT, Utah','Unassigned, Utah','Out of CO, Colorado','Unassigned, Colorado',
                      'Out of NE, Nebraska', 'Unassigned, Nebraska','Out of IA, Iowa','Unassigned, Iowa','Out of MN, Minnesota', 
                      'Unassigned, Minnesota','Out of CA, California','Unassigned, California','Out of AZ, Arizona','Unassigned, Arizona','Out of NM, New Mexico',
                      'Unassigned, New Mexico','Out of TX, Texas','Unassigned, Texas','Out of OK, Oklahoma','Unassigned, Oklahoma',
                      'Out of LA, Louisiana','Unassigned, Louisiana','Out of AR, Arkansas','Unassigned, Arkansas','Out of MO, Missouri',
                      'Unassigned, Missouri','Out of KS, Kansas','Unassigned, Kansas',
                      'Out of WI, Wisconsin', 'Unassigned, Wisconsin','Out of MI, Michigan','Unassigned, Michigan','Out of IN, Indiana', 
                      'Unassigned, Indiana','Out of IL, Illinois','Unassigned, Illinois','Out of KY, Kentucky','Unassigned, Kentucky','Out of TN, Tennessee',
                      'Unassigned, Tennessee','Out of MS, Mississippi','Unassigned, Mississippi','Out of AL, Alabama','Unassigned, Alabama',
                      'Out of GA, Georgia','Unassigned, Georgia','Out of FL, Florida','Unassigned, Florida','Out of SC, South Carolina',
                      'Unassigned, South Carolina','Out of NC, North Carolina','Unassigned, North Carolina','Out of VA, Virginia','Unassigned, Virginia',
                      'Out of WV, West Virginia', 'Unassigned, West Virginia','Out of OH, Ohio','Unassigned, Ohio','Out of PA, Pennsylvania', 
                      'Unassigned, Pennsylvania','Out of MD, Maryland','Unassigned, Maryland','Out of DE, Delaware','Unassigned, Delaware','Out of NJ, New Jersey',
                      'Unassigned, New Jersey','Out of NY, New York','Unassigned, New York','Out of VT, Vermont','Unassigned, Vermont',
                      'Out of CT, Connecticut','Unassigned, Connecticut','Out of RI, Rhode Island','Unassigned, Rhode Island','Out of MA, Massachusetts',
                      'Unassigned, Massachusetts','Out of NH, New Hampshire','Unassigned, New Hampshire','Out of ME, Maine','Unassigned, Maine','Southeast Utah, Utah','Southwest Utah, Utah',
                      'Franklin City, Virginia','Weber-Morgan, Utah','Roanoke City, Virginia','Dona Ana, New Mexico','Central Utah, Utah',
                      'Kansas City, Missouri','St. Louis City, Missouri','James City, Virginia','Michigan Department of Corrections (MDOC), Michigan',
                      'TriCounty, Utah','Dukes and Nantucket, Massachusetts','Charles City, Virginia','Carson City, Nevada',
                      'Federal Correctional Institution (FCI), Michigan','Baltimore City, Maryland','Fairfax City, Virginia','Richmond City, Virginia',
                      'Bear River, Utah'])

#df = df.rename(columns={'Weber-Morgan, Utah':'Weber, Utah', 'Roanoke City, Virginia':'Roanoke, Virginia','Dona Ana, New Mexico':'Do√±a Ana, New Mexico'})


# Convert to new cases only
df_new_cases_only = pd.DataFrame()
for i in list(df):
  array = [second - first for first, second in zip(df[i], df[i][1:])]
  # Make all negative values 0
  pos_array = []
  for j in array:
      if j < 0:
          a = 0
      else:
          a = j
      pos_array.append(a)
  df_new_cases_only[i] = pos_array

# Convert all to floats
df_new_cases_only = df_new_cases_only.astype(float)
df = df_new_cases_only


actual = []
day = []

days = 7
# Iterate across dataframe, one county at a time
for county in list(df):
  seq = list(df[county])

  day0 = seq[0:len(seq)-gap+1]
  day1 = seq[0+days:len(seq)-gap+1+days]

  actual.append(day0)
  day.append(day1)


mse_test = mean_squared_error(actual, day)
mae_test = mean_absolute_error(actual, day)
r_2 = r2_score(actual, day)

print(mse_test)
print(mae_test)
print(r_2)

import pandas as pd
import numpy as np
from datetime import datetime
from datetime import date
from datetime import timedelta

from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error

d0 = date(2021, 2, 28)
d1 = date.today()

gap = abs(d0-d1)
gap = gap.days

csse_df = pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv')
# (put these all in one line when you get a chance!) df = pd.concat([csse_df[csse_df['Province_State'] == 'Wyoming'],csse_df[csse_df['Province_State'] == 'North Dakota']])

wy_df = csse_df[csse_df['Province_State'] == 'Wyoming']
nd_df = csse_df[csse_df['Province_State'] == 'North Dakota']
mt_df = csse_df[csse_df['Province_State'] == 'Montana']
sd_df = csse_df[csse_df['Province_State'] == 'South Dakota']
id_df = csse_df[csse_df['Province_State'] == 'Idaho']
wa_df = csse_df[csse_df['Province_State'] == 'Washington']
or_df = csse_df[csse_df['Province_State'] == 'Oregon']
nv_df = csse_df[csse_df['Province_State'] == 'Nevada']
ut_df = csse_df[csse_df['Province_State'] == 'Utah']
co_df = csse_df[csse_df['Province_State'] == 'Colorado']
ne_df = csse_df[csse_df['Province_State'] == 'Nebraska']
ia_df = csse_df[csse_df['Province_State'] == 'Iowa']
mn_df = csse_df[csse_df['Province_State'] == 'Minnesota']
ca_df = csse_df[csse_df['Province_State'] == 'California']
az_df = csse_df[csse_df['Province_State'] == 'Arizona']
nm_df = csse_df[csse_df['Province_State'] == 'New Mexico']
tx_df = csse_df[csse_df['Province_State'] == 'Texas']
ok_df = csse_df[csse_df['Province_State'] == 'Oklahoma']
ks_df = csse_df[csse_df['Province_State'] == 'Kansas']
mo_df = csse_df[csse_df['Province_State'] == 'Missouri']
il_df = csse_df[csse_df['Province_State'] == 'Illinois']
wi_df = csse_df[csse_df['Province_State'] == 'Wisconsin']
mi_df = csse_df[csse_df['Province_State'] == 'Michigan']
in_df = csse_df[csse_df['Province_State'] == 'Indiana']
ky_df = csse_df[csse_df['Province_State'] == 'Kentucky']
tn_df = csse_df[csse_df['Province_State'] == 'Tennessee']
ms_df = csse_df[csse_df['Province_State'] == 'Mississippi']
ar_df = csse_df[csse_df['Province_State'] == 'Arkansas']
la_df = csse_df[csse_df['Province_State'] == 'Louisiana']
al_df = csse_df[csse_df['Province_State'] == 'Alabama']
ga_df = csse_df[csse_df['Province_State'] == 'Georgia']
fl_df = csse_df[csse_df['Province_State'] == 'Florida']
sc_df = csse_df[csse_df['Province_State'] == 'South Carolina']
nc_df = csse_df[csse_df['Province_State'] == 'North Carolina']
va_df = csse_df[csse_df['Province_State'] == 'Virginia']
wv_df = csse_df[csse_df['Province_State'] == 'West Virginia']
oh_df = csse_df[csse_df['Province_State'] == 'Ohio']
pa_df = csse_df[csse_df['Province_State'] == 'Pennsylvania']
md_df = csse_df[csse_df['Province_State'] == 'Maryland']
de_df = csse_df[csse_df['Province_State'] == 'Delaware']
nj_df = csse_df[csse_df['Province_State'] == 'New Jersey']
ny_df = csse_df[csse_df['Province_State'] == 'New York']
vt_df = csse_df[csse_df['Province_State'] == 'Vermont']
ct_df = csse_df[csse_df['Province_State'] == 'Connecticut']
ri_df = csse_df[csse_df['Province_State'] == 'Rhode Island']
ma_df = csse_df[csse_df['Province_State'] == 'Massachusetts']
nh_df = csse_df[csse_df['Province_State'] == 'New Hampshire']
me_df = csse_df[csse_df['Province_State'] == 'Maine']

df = pd.concat([wy_df,nd_df,mt_df,sd_df,id_df,wa_df,or_df,nv_df,ut_df,co_df,ne_df,ia_df,mn_df,ca_df,az_df,nm_df,tx_df,ok_df,la_df,ar_df,mo_df,ks_df,wi_df,mi_df,in_df,il_df,ky_df,tn_df,ms_df,al_df,ga_df,fl_df,sc_df,nc_df,va_df,wv_df,oh_df,pa_df,md_df,de_df,nj_df,ny_df,ct_df,ri_df,ma_df,vt_df,nh_df,me_df], ignore_index=True)

df['Location'] = df['Admin2'].str.cat(df['Province_State'], sep=', ')

df = df.drop(columns=['UID','code3','iso2','iso3','FIPS','Country_Region','Lat','Long_','Combined_Key',
                      #'2/1/20','2/2/20','2/3/20','2/4/20','2/5/20',
                      #'2/6/20','2/7/20','2/8/20','2/9/20','2/10/20','2/11/20','2/12/20','2/13/20','2/14/20','2/15/20','2/16/20','2/17/20','2/18/20',
                      #'2/19/20','2/20/20','2/21/20','2/22/20','2/23/20','2/24/20','2/25/20','2/26/20','2/27/20','2/28/20','2/29/20','3/1/20','3/2/20',
                      #'3/3/20','3/4/20','3/5/20','3/6/20','3/7/20','3/8/20','3/9/20','3/10/20',
                      'Admin2','Province_State'])


headers_vals = list(df['Location'])

headers_vals.insert(0,'Date')

df = df.drop(columns=['Location'])

df = df.transpose().reset_index()

df.columns = headers_vals

df = df.set_index('Date')

df

df[0:len(df)-gap-days+2]

df[0+days:len(df)-gap+2]